const express = require('express');
const router = express.Router();
const Appointment = require('../models/Appointment');
const Hospital = require('../models/Hospitals');
const Doctor = require('../models/Doctor');
const { authenticate, authorizeRoles } = require('../middleware/auth'); 

// Helper function to generate time slots (9:00 AM to 3:45 PM in 15-minute intervals)
const generateSlots = () => {
  const slots = [];
  let hour = 9;
  let minute = 0;
  // Slots up to 3:45 PM (hour 15, minute 45)
  while (hour < 16) { 
    const suffix = hour >= 12 ? 'PM' : 'AM';
    const displayHour = hour % 12 === 0 ? 12 : hour % 12;
    const time = `${String(displayHour).padStart(2, '0')}:${String(minute).padStart(2, '0')} ${suffix}`;
    slots.push(time);
    minute += 15;
    if (minute === 60) {
      minute = 0;
      hour += 1;
    }
  }
  // Filter out any slot beyond 3:45 PM (which is the 4:00 PM slot generated by the loop)
  return slots.filter(slot => {
    const [timePart, ampm] = slot.split(' ');
    let [h, m] = timePart.split(':').map(Number);
    if (ampm === 'PM' && h !== 12) h += 12;
    if (ampm === 'AM' && h === 12) h = 0;
    
    const totalMinutes = h * 60 + m;
    return totalMinutes <= (15 * 60 + 45); 
  });
};


// GET /api/appointment/doctors/:hospitalId
// Route to fetch the list of doctors affiliated with a hospital
router.get('/doctors/:hospitalId', async (req, res) => {
  try {
    const hospital = await Hospital.findById(req.params.hospitalId);
    if (!hospital) {
      return res.status(404).json({ message: "Hospital not found." });
    }
    // Returns the array of doctors stored in the hospital document
    res.json(hospital.doctors);
  } catch (err) {
    res.status(500).json({ message: "Error fetching doctors." });
  }
});


// POST /api/appointment/book
// Route to create a new appointment (handles patient booking)
router.post('/book', authenticate, authorizeRoles('patient'), async (req, res) => {
  try {
    const { hospitalId, doctorId, patientName, age, gender, appointmentDate, email } = req.body;
    const patientId = req.user._id; // Get patient ID from authenticated user

    // Basic validation
    if (!hospitalId || !doctorId || !patientName || !appointmentDate || !email) {
      return res.status(400).json({ message: "Missing required fields for booking." });
    }

    const allSlots = generateSlots();
    
    // Find all existing appointments for this doctor on the selected date
    const appointmentsOnDate = await Appointment.find({
      doctorId,
      appointmentDate: {
        $gte: new Date(new Date(appointmentDate).setHours(0, 0, 0, 0)),
        $lte: new Date(new Date(appointmentDate).setHours(23, 59, 59, 999)),
      },
    });

    const takenSlots = appointmentsOnDate.map(appt => appt.slotTime);
    const availableSlot = allSlots.find(slot => !takenSlots.includes(slot));
    
    if (!availableSlot) {
      return res.status(409).json({ message: 'No available slots left for this doctor on this date.' });
    }

    // Generate a unique token number for the appointment
    const token = appointmentsOnDate.length + 1;

    // Fetch hospital and doctor details for validation and appointment record
    const hospital = await Hospital.findById(hospitalId);
    const doctorInHospital = hospital.doctors.find(doc => doc._id.toString() === doctorId);

    if (!hospital || !doctorInHospital) {
      return res.status(404).json({ message: 'Hospital or Doctor not found.' });
    }

    // Create the final appointment record
    const newAppointment = new Appointment({
      hospitalId,
      doctorId,
      patientId,
      appointmentDate,
      slotTime: availableSlot,
      token,
      email,
    });

    await newAppointment.save();
    
    res.status(201).json({ 
        message: 'Appointment booked successfully!', 
        appointment: newAppointment 
    });
  } catch (err) {
    console.error('Error booking appointment:', err);
    res.status(500).json({ message: 'Failed to book appointment', error: err.message });
  }
});

// GET /api/doctors/appointments
// Allows a logged-in doctor to check appointments booked to them
router.get('/doctors/appointments', authenticate, authorizeRoles('doctor'), async (req, res) => {
  try {
    const doctorId = req.user._id;

    const appointments = await Appointment.find({ doctorId: doctorId })
      .sort({ appointmentDate: 1, slotTime: 1 })
      .exec();

    res.status(200).json(appointments);
  } catch (err) {
    console.error('Error fetching doctor appointments:', err);
    res.status(500).json({ message: "Server error fetching appointments." });
  }
});


module.exports = router;